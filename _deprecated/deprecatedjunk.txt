#commandlookup.py ; seamsbot.py

##def send(string):
##    ___name___ = "send"
##    print(string)
##    print("Sent to:"+str(recipient))
##    message = client.messages.create(to=str(recipient),
##                                     from_=serverNumber,
##                                     body=string)

##    #####needs improvement#####    
##    def extractMessage(ms):
##        #Checks if this message was sent by us, if so return empty string very janky way of figuring it out
##        if ms[1].startswith("Sent from your Twilio trial account -"):
##        #if recipient == returnSetting("servercontact"):
##            return ""
##        else:
##            return ms[1]

##def poll(pollDelay)
            #print(extractMessage(messages),recipient)
            print(messages[0])
##            if extractMessage(messages) != "":
##                process(extractMessage(messages))

##def listOps(argstr):
##    args = splitArgString(argstr,1)
##    myList = args[1]
##    myNumbers = []
##    for n in myList.split(","):
##        myNumbers.append(int(n))
##    send(
##        "List Size="+str(len(myNumbers))+
##        ",Mean="+str(float(sum(myNumbers))/len(myNumbers))+
##        ",Median="+str(statistics.median(myNumbers))+
##        ",Mode="+str(max(set([5,5,3]), key=[5,5,3].count))
##        )

##def splitArgString(argstr,argcount,delimiter = " "):
##    firstString = ""
##    secondString = ""
##    index = 0
##    argsCounter = 0
##    while argsCounter < argcount:
##        firstString+=argstr[index]
##        index+=1
##        if argstr[index] == delimiter:
##            argsCounter+=1
##            
###    print(firstString)
###    print(argstr[len(firstString)+1:])
##
##    args = firstString.split(delimiter)
##    args.append(argstr[len(firstString)+1:])
##
##    return args

##def getWikipedia(argstr):
##    #syntax:
##    #wikipedia random
##    #wikipedia article
##    
##    args = splitArgString(argstr,2)
##    if args[1].lower() == "article":
##        send(wikipedia.summary(args[2],sentences=2))
##    if args[2].lower() == "random":
##        send(wikipedia.random())
##

##def pythonEvaluator(argstr):
##    #synatx:
##    #python return <command>
##    #python none <command>
##    #if it's just python <command>, assume return
##    args = splitArgString(argstr,2)
##    if args[1].lower() == "return":
##        send(eval(args[2]))
##    else:
## 

##def process(argstr):
##    #if argstr!= "":
##    #    pythonEvaluator(argstr)
##    args = argstr.split(" ")
##    print("Arguments:",args)
##    if args[0].lower() == "python":
##        pythonEvaluator(argstr)
##    elif args[0].lower() == "wikipedia":
##        getWikipedia(argstr)
##    elif args[0].lower() == "list":
##        listOps(argstr)
##    elif args[0].lower() == "pm":
##        pm(argstr)
##    elif args[0].lower() == "imdb":
##        splitArgString(argstr,1)
##        #send(getIMDB(splitArgString(argstr,1)[1]))
##        send(getIMDB(splitArgString(argstr,1)[1:]))
##    elif args[0].lower() == "mtg":
##        splitArgString(argstr,1)
##        send(getMTGCard(splitArgString(argstr,1)[1]))

##def error(string):
##    print(string)